BarrierTunneling {
  mt = 0.3 , 0.3
  g  = 2,    2
}

Band2BandTunneling
{
  *Apath1	= 4.0000e+14	# [1/cm^3/sec]
  *Bpath1	= 1.0000e+07	# [V/cm]
  Dpath1	= 0.0000e+00	# [eV]
  Ppath1	= 0	# [eV] Direct Tunneling when = 0
  m_c = 0.02
  m_v = 0.4
  degeneracy = 1
}

Epsilon
{ *  Ratio of the permittivities of material and vacuum

  * epsilon() = epsilon
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	epsilon(0)	= 14.55	# [1]
	epsilon(1)	= 13.18	# [1]
}


Epsilon_aniso
{ *  Ratio of the permittivities of material and vacuum

  * epsilon() = epsilon
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	epsilon(0)	= 14.55	# [1]
	epsilon(1)	= 13.18	# [1]
}


RefractiveIndex
{ *  Optical Refractive Index

  * refractiveindex() = refractiveindex * (1 + alpha * (T-Tpar))
	Tpar	= 3.0000e+02	# [K]
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	refractiveindex(0)	= 3.892	# [1]
	refractiveindex(1)	= 3.5108	# [1]
	alpha(0)	= 2.0000e-04	# [1/K]
	alpha(1)	= 4.0000e-04	# [1/K]
	CarrDepCoeff(0)	= 1	# [1]
	CarrDepCoeff(1)	= 1	# [1]
}


LatticeHeatCapacity
{ *  lumped electron-hole-lattice heat capacity

  * cv() = cv + cv_b * T + cv_c * T^2 + cv_d * T^3 
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	cv(0)	= 1.6	# [J/(Kcm^3)]
	cv(1)	= 1.6	# [J/(Kcm^3)]
	cv_b(0)	= 0.0000e+00	# [J/(K^2*cm^3)]
	cv_b(1)	= 0.0000e+00	# [J/(K^2*cm^3)]
	cv_c(0)	= 0.0000e+00	# [J/(K^3*cm^3)]
	cv_c(1)	= 0.0000e+00	# [J/(K^3*cm^3)]
	cv_d(0)	= 0.0000e+00	# [J/(K^4*cm^3)]
	cv_d(1)	= 0.0000e+00	# [J/(K^4*cm^3)]
}


Kappa
{ *  Lattice thermal conductivity

  * Formula = 0:
  * kappa() = 1 / ( 1/kappa + 1/kappa_b * T + 1/kappa_c * T^2 )
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * The following interpolation polynom can be used on interval [Xmin(I),Xmax(I)]:
  * F(X) = F(I-1)+A(I)*(X-Xmin(I))+B(I)*(X-Xmin(I))^2+C(I)*(X-Xmin(I))^3,
  * where Xmax(I), F(I), B(I), C(I) are defined below for each interval.
  * A(I) is calculated for a boundary condition F(Xmax(I)) = F(I).
  *
  * Definition of mole fraction intervals, parameters, and coefficients:
	* parameter kappa:
	Xmax(0)	= 0.0000e+00	# [1]
	kappa(0)	= 1.5	# [W/(K cm)]
	Xmax(1)	= 1	# [1]
	kappa(1)	= 1.5	# [W/(K cm)]
	B(kappa(1))	= 0.0000e+00	# [W/(K cm)]
	C(kappa(1))	= 0.0000e+00	# [W/(K cm)]

	* parameter kappa_b:
	Xmax(0)	= 0.0000e+00	# [1]
	kappa_b(0)	= 0.0000e+00	# [W/(K^2 cm)]
	Xmax(1)	= 1	# [1]
	kappa_b(1)	= 0.0000e+00	# [W/(K^2 cm)]
	B(kappa_b(1))	= 0.0000e+00	# [W/(K^2 cm)]
	C(kappa_b(1))	= 0.0000e+00	# [W/(K^2 cm)]

	* parameter kappa_c:
	Xmax(0)	= 0.0000e+00	# [1]
	kappa_c(0)	= 0.0000e+00	# [W/(K^3 cm)]
	Xmax(1)	= 1	# [1]
	kappa_c(1)	= 0.0000e+00	# [W/(K^3 cm)]
	B(kappa_c(1))	= 0.0000e+00	# [W/(K^3 cm)]
	C(kappa_c(1))	= 0.0000e+00	# [W/(K^3 cm)]

	* parameter 1/kappa:
	Xmax(0)	= 0.0000e+00	# [1]
	1/kappa(0)	= 3.7	# [(K cm)/W]
	Xmax(1)	= 1	# [1]
	1/kappa(1)	= 2.17391	# [(K cm)/W]
	B(1/kappa(1))	= -2.3000e+01	# [(K cm)/W]
	C(1/kappa(1))	= 0.0000e+00	# [(K cm)/W]

	* parameter 1/kappa_b:
	Xmax(0)	= 0.0000e+00	# [1]
	1/kappa_b(0)	= 0.0000e+00	# [cm/W]
	Xmax(1)	= 1	# [1]
	1/kappa_b(1)	= 0.0000e+00	# [cm/W]
	B(1/kappa_b(1))	= 0.0000e+00	# [cm/W]
	C(1/kappa_b(1))	= 0.0000e+00	# [cm/W]

	* parameter 1/kappa_c:
	Xmax(0)	= 0.0000e+00	# [1]
	1/kappa_c(0)	= 0.0000e+00	# [cm/(W K)]
	Xmax(1)	= 1	# [1]
	1/kappa_c(1)	= 0.0000e+00	# [cm/(W K)]
	B(1/kappa_c(1))	= 0.0000e+00	# [cm/(W K)]
	C(1/kappa_c(1))	= 0.0000e+00	# [cm/(W K)]

}


Kappa_aniso
{ *  Lattice thermal conductivity

  * Formula = 0:
  * kappa() = 1 / ( 1/kappa + 1/kappa_b * T + 1/kappa_c * T^2 )
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * The following interpolation polynom can be used on interval [Xmin(I),Xmax(I)]:
  * F(X) = F(I-1)+A(I)*(X-Xmin(I))+B(I)*(X-Xmin(I))^2+C(I)*(X-Xmin(I))^3,
  * where Xmax(I), F(I), B(I), C(I) are defined below for each interval.
  * A(I) is calculated for a boundary condition F(Xmax(I)) = F(I).
  *
  * Definition of mole fraction intervals, parameters, and coefficients:
	* parameter kappa:
	Xmax(0)	= 0.0000e+00	# [1]
	kappa(0)	= 1.5	# [W/(K cm)]
	Xmax(1)	= 1	# [1]
	kappa(1)	= 1.5	# [W/(K cm)]
	B(kappa(1))	= 0.0000e+00	# [W/(K cm)]
	C(kappa(1))	= 0.0000e+00	# [W/(K cm)]

	* parameter kappa_b:
	Xmax(0)	= 0.0000e+00	# [1]
	kappa_b(0)	= 0.0000e+00	# [W/(K^2 cm)]
	Xmax(1)	= 1	# [1]
	kappa_b(1)	= 0.0000e+00	# [W/(K^2 cm)]
	B(kappa_b(1))	= 0.0000e+00	# [W/(K^2 cm)]
	C(kappa_b(1))	= 0.0000e+00	# [W/(K^2 cm)]

	* parameter kappa_c:
	Xmax(0)	= 0.0000e+00	# [1]
	kappa_c(0)	= 0.0000e+00	# [W/(K^3 cm)]
	Xmax(1)	= 1	# [1]
	kappa_c(1)	= 0.0000e+00	# [W/(K^3 cm)]
	B(kappa_c(1))	= 0.0000e+00	# [W/(K^3 cm)]
	C(kappa_c(1))	= 0.0000e+00	# [W/(K^3 cm)]

	* parameter 1/kappa:
	Xmax(0)	= 0.0000e+00	# [1]
	1/kappa(0)	= 3.7	# [(K cm)/W]
	Xmax(1)	= 1	# [1]
	1/kappa(1)	= 2.17391	# [(K cm)/W]
	B(1/kappa(1))	= -2.3000e+01	# [(K cm)/W]
	C(1/kappa(1))	= 0.0000e+00	# [(K cm)/W]

	* parameter 1/kappa_b:
	Xmax(0)	= 0.0000e+00	# [1]
	1/kappa_b(0)	= 0.0000e+00	# [cm/W]
	Xmax(1)	= 1	# [1]
	1/kappa_b(1)	= 0.0000e+00	# [cm/W]
	B(1/kappa_b(1))	= 0.0000e+00	# [cm/W]
	C(1/kappa_b(1))	= 0.0000e+00	# [cm/W]

	* parameter 1/kappa_c:
	Xmax(0)	= 0.0000e+00	# [1]
	1/kappa_c(0)	= 0.0000e+00	# [cm/(W K)]
	Xmax(1)	= 1	# [1]
	1/kappa_c(1)	= 0.0000e+00	# [cm/(W K)]
	B(1/kappa_c(1))	= 0.0000e+00	# [cm/(W K)]
	C(1/kappa_c(1))	= 0.0000e+00	# [cm/(W K)]

}


EnergyRelaxationTime
{ *  Energy relaxation times in picoseconds
	tau_w_ele	= 0.8	# [ps]
	tau_w_hol	= 0.3	# [ps]

 * Below is the example of energy relaxation time approximation
 * by the ratio of two irrational polynomials.
 * If Wmax(interval-1) < Wc < Wmax(interval), then:
 * tau_w = (tau_w)*(Numerator^Gn)/(Denominator^Gd),
 * where (Numerator or Denominator)=SIGMA[A(i)(Wc^P(i))],
 * Wc=1.5(k*Tcar)/q (in eV).
 * By default: Wmin(0)=Wmax(-1)=0; Wmax(0)=infinity.
 * The option can be activated by specifying appropriate Formula equal to 2.
 *      Formula(tau_w_ele) = 2
 *      Formula(tau_w_hol) = 2
 *      Wmax(interval)_ele = 
 *      tau_w_ele(interval)     =     
 *      Numerator(interval)_ele{
 *        A(0)  = 
 *        P(0)  = 
 *        A(1)  = 
 *        P(1)  = 
 *        G     = 
 *      }
 *      Denominator(interval)_ele{
 *        A(0)  = 
 *        P(0)  = 
 *        G     = 
 *      }

 * Note: Energy relaxation times can be either molefraction dependent
 *       or energy dependent, but not both!

 *      Wmax(interval)_hol = 
 *      tau_w_hol(interval)     =  
}

vanOverstraetendeMan * Impact Ionization:
{ * G_impact = alpha_n n v_drift_n  +  alpha_p p v_drift_p
  * with alpha = gamma a  exp(-b gamma/E) for E<E0 (low) and E>E0 (high)
  *  with gamma = tanh(hbarOmega/(2kT0)) / tanh(hbarOmega/(2kT))
	a(low)	= 3.0000e+04 ,	3.0000e+04	# [1/cm]
	a(high)	= 3.0000e+04 ,	3.0000e+04	# [1/cm]
	b(low)	= 6.4000e+05 ,	6.4000e+05	# [V/cm]
	b(low)	= 6.4000e+05 ,	6.4000e+05	# [V/cm]
	E0	= 4.0000e+05 ,	4.0000e+05	# [V/cm]
	hbarOmega	= 0.035	# [eV]
}

AvalancheFactors
{ *  Coefficientss for avalanche generation with hydro
  *  Factors n_l_f, p_l_f for energy relaxation length in the expressions
  *  for effective electric field for avalanche generation
  *  eEeff = eEeff / n_l_f  ( or b = b*n_l_f ) 
  *  hEeff = hEeff / p_l_f  ( or b = b*p_l_f ) 
  *  Additional coefficients n_gamma, p_gamma, n_delta, p_delta 
	n_l_f	= 0.8	# [1]
	p_l_f	= 0.8	# [1]
	n_gamma	= 0.0000e+00	# [1]
	p_gamma	= 0.0000e+00	# [1]
	n_delta	= 0.0000e+00	# [1]
	p_delta	= 0.0000e+00	# [1]
}

Bandgap
{ * Eg = Eg0 + alpha Tpar^2 / (beta + Tpar) - alpha T^2 / (beta + T)
  * Parameter 'Tpar' specifies the value of lattice 
  * temperature, at which parameters below are defined
  * Chi0 is electron affinity.
	Tpar	= 3.0000e+02	# [K]
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * The following interpolation polynom can be used on interval [Xmin(I),Xmax(I)]:
  * F(X) = F(I-1)+A(I)*(X-Xmin(I))+B(I)*(X-Xmin(I))^2+C(I)*(X-Xmin(I))^3,
  * where Xmax(I), F(I), B(I), C(I) are defined below for each interval.
  * A(I) is calculated for a boundary condition F(Xmax(I)) = F(I).
  *
  * Definition of mole fraction intervals, parameters, and coefficients:
	* parameter Eg0:
	Xmax(0)	= 0.0000e+00	# [1]
	Eg0(0)	= 0.355482	# [eV]
	Xmax(1)	= 1	# [1]
	Eg0(1)	= 1.42248	# [eV]
	B(Eg0(1))	= 0.555	# [eV]
	C(Eg0(1))	= 0.0000e+00	# [eV]

	* parameter alpha:
	Xmax(0)	= 0.0000e+00	# [1]
	alpha(0)	= 3.3500e-04	# [eV K^-1]
	Xmax(1)	= 1	# [1]
	alpha(1)	= 5.4050e-04	# [eV K^-1]
	B(alpha(1))	= 0.0000e+00	# [eV K^-1]
	C(alpha(1))	= 0.0000e+00	# [eV K^-1]

	* parameter beta:
	Xmax(0)	= 0.0000e+00	# [1]
	beta(0)	= 2.4800e+02	# [K]
	Xmax(1)	= 1	# [1]
	beta(1)	= 2.0400e+02	# [K]
	B(beta(1))	= 0.0000e+00	# [K]
	C(beta(1))	= 0.0000e+00	# [K]

	* parameter Chi0:
	Xmax(0)	= 0.0000e+00	# [1]
	Chi0(0)	= 4.92751	# [eV]
	Xmax(1)	= 1	# [1]
	Chi0(1)	= 4.11826	# [eV]
	B(Chi0(1))	= 0.0000e+00	# [eV]
	C(Chi0(1))	= 0.0000e+00	# [eV]

}

FreeCarrierAbsorption
{
  * Coefficients for free carrier absorption:
  * fcaalpha_n for electrons,
  * fcaalpha_p for holes

  * FCA = (alpha_n * n + alpha_p * p) * Light Intensity
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	fcaalpha_n(0)	= 4.0000e-18	# [cm^2]
	fcaalpha_n(1)	= 4.0000e-18	# [cm^2]
	fcaalpha_p(0)	= 8.0000e-18	# [cm^2]
	fcaalpha_p(1)	= 8.0000e-18	# [cm^2]
}

BandstructureParameters
{
  * Parameters for k.p bandstructure calculation:

  * Zincblende crystals:
  * Luttinger parameters gamma_1, gamma_2, gamma_3
  * Spin-orbit split-off energy so
  * Matrix element parameters for TE and TM modes ep_te and ep_tm

  * Wurtzite crystals:
  * Effective mass parameters A1, A2, A3, A4, A5, A6
  * Spin-orbit split-off energy so
  * Crystal-field split  energy cr
  * Matrix element parameters for TE and TM modes ep_te and ep_tm
  * 
  * 

  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	gamma_1(0)	= 20.4	# [1]
	gamma_1(1)	= 6.85	# [1]
	gamma_2(0)	= 8.3	# [1]
	gamma_2(1)	= 2.1	# [1]
	gamma_3(0)	= 9.1	# [1]
	gamma_3(1)	= 2.9	# [1]
	so(0)	= 0.38	# [eV]
	so(1)	= 0.34	# [eV]
	ep_te(0)	= 21.5	# [eV]
	ep_te(1)	= 28.8	# [eV]
	ep_tm(0)	= 21.5	# [eV]
	ep_tm(1)	= 28.8	# [eV]
	A1(0)	= 0.0000e+00	# [1]
	A1(1)	= 0.0000e+00	# [1]
	A2(0)	= 0.0000e+00	# [1]
	A2(1)	= 0.0000e+00	# [1]
	A3(0)	= 0.0000e+00	# [1]
	A3(1)	= 0.0000e+00	# [1]
	A4(0)	= 0.0000e+00	# [1]
	A4(1)	= 0.0000e+00	# [1]
	A5(0)	= 0.0000e+00	# [1]
	A5(1)	= 0.0000e+00	# [1]
	A6(0)	= 0.0000e+00	# [1]
	A6(1)	= 0.0000e+00	# [1]
	cr(0)	= 0.0000e+00	# [eV]
	cr(1)	= 0.0000e+00	# [eV]
}

QWStrain
{
  * Zincblende crystals:
  *   Parameters: a_nu, a_c, b, C_12, C_11
  *   StrainConstant eps (formula = 1) or lattice constant
  *   a0 (formula = 2) for energy shift of quantum-well
  *   subbands.
  *   a0(T) = a0 + alpha (T-Tpar)

  * Wurtzite crystals:
  *   Parameters: a_c, D1, D2, D3, D4, C_13, C_33
  *   Lattice constants a0 and c0 (formula 2 must be used)
  *   a0(T) = a0 + alpha (T-Tpar)
  *   c0(T) = c0 + alpha (T-Tpar)

	  * Default formula	= 1	# [1]
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	a_nu(0)	= 1	# [eV]
	a_nu(1)	= 1.16	# [eV]
	a_c(0)	= -5.0800e+00	# [eV]
	a_c(1)	= -7.1700e+00	# [eV]
	b_shear(0)	= -1.8000e+00	# [eV]
	b_shear(1)	= -1.7000e+00	# [eV]
	C_11(0)	= 8.329	# [1e-2 GPa]
	C_11(1)	= 11.879	# [1e-2 GPa]
	C_12(0)	= 4.526	# [1e-2 GPa]
	C_12(1)	= 5.376	# [1e-2 GPa]
	eps(0)	= 0.0000e+00	# [1]
	eps(1)	= 0.0000e+00	# [1]
	a0(0)	= 6.0583e-10	# [m]
	a0(1)	= 5.6533e-10	# [m]
	alpha(0)	= 2.7400e-15	# [m/K]
	alpha(1)	= 3.8800e-15	# [m/K]
	D1(0)	= 0.0000e+00	# [eV]
	D1(1)	= 0.0000e+00	# [eV]
	D2(0)	= 0.0000e+00	# [eV]
	D2(1)	= 0.0000e+00	# [eV]
	D3(0)	= 0.0000e+00	# [eV]
	D3(1)	= 0.0000e+00	# [eV]
	D4(0)	= 0.0000e+00	# [eV]
	D4(1)	= 0.0000e+00	# [eV]
	C_13(0)	= 0.0000e+00	# [1e-2 GPa]
	C_13(1)	= 0.0000e+00	# [1e-2 GPa]
	C_33(0)	= 0.0000e+00	# [1e-2 GPa]
	C_33(1)	= 0.0000e+00	# [1e-2 GPa]
	c0(0)	= 0.0000e+00	# [cm]
	c0(1)	= 0.0000e+00	# [cm]
}

eDOSMass
{
  * For effective mass specificatition Formula1 (me approximation):
  * or Formula2 (Nc300) can be used :
	Formula	= 2	# [1]
  * Formula2:
  * me/m0 = (Nc300/2.540e19)^2/3 
  * Nc(T) = Nc300 * (T/300)^3/2 
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	a(0)	= 0.1905	# [1]
	a(1)	= 0.1905	# [1]
	ml(0)	= 0.9163	# [1]
	ml(1)	= 0.9163	# [1]
	mm(0)	= 0.0000e+00	# [1]
	mm(1)	= 0.0000e+00	# [1]
	Nc300(0)	= 8.7200e+16	# [cm-3]
	Nc300(1)	= 4.4200e+17	# [cm-3]
	# Nc300(0)	= 6.6600e+18	# [cm-3]
	# Nc300(1)	= 8.4700e+18	# [cm-3]
}

hDOSMass
{
  * For effective mass specificatition Formula1 (mh approximation):
  * or Formula2 (Nv300) can be used :
	Formula	= 2	# [1]
  * Formula2:
  * mh/m0 = (Nv300/2.540e19)^2/3 
  * Nv(T) = Nv300 * (T/300)^3/2 
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	a(0)	= 0.443587	# [1]
	a(1)	= 0.443587	# [1]
	b(0)	= 3.6095e-03	# [K^-1]
	b(1)	= 3.6095e-03	# [K^-1]
	c(0)	= 1.1735e-04	# [K^-2]
	c(1)	= 1.1735e-04	# [K^-2]
	d(0)	= 1.2632e-06	# [K^-3]
	d(1)	= 1.2632e-06	# [K^-3]
	e(0)	= 3.0256e-09	# [K^-4]
	e(1)	= 3.0256e-09	# [K^-4]
	f(0)	= 4.6834e-03	# [K^-1]
	f(1)	= 4.6834e-03	# [K^-1]
	g(0)	= 2.2869e-04	# [K^-2]
	g(1)	= 2.2869e-04	# [K^-2]
	h(0)	= 7.4693e-07	# [K^-3]
	h(1)	= 7.4693e-07	# [K^-3]
	i(0)	= 1.7275e-09	# [K^-4]
	i(1)	= 1.7275e-09	# [K^-4]
	mm(0)	= 0.0000e+00	# [1]
	mm(1)	= 0.0000e+00	# [1]
	# Nv300(0)	= 6.6600e+18	# [cm-3]
	# Nv300(1)	= 8.4700e+18	# [cm-3]
	Nv300(0)	= 8.7200e+16	# [cm-3]
	Nv300(1)	= 4.4200e+17	# [cm-3]
}

SchroedingerParameters:
{ * For the hole masses for Schroedinger equation you can
  * use different formulas.
  * 0: use the isotropic density of states effective mass
  * 1: (for materials with Si-like hole band structure)
  *    m(k)/m0=1/(A+-sqrt(B+C*((xy)^2+(yz)^2+(zx)^2)))
  *    where k=(x,y,z) is unit normal vector in reziprocal
  *    space.  '+' for light hole band, '-' for heavy hole band
  * 2: Heavy hole mass mh and light hole mass ml are
  *    specified explicitly.
  * For electron masses, the following formula options exist:
  * 0: use the isotropic density of states effective mass
  * 1: (for materials with Si-like hole band structure)
  *    use the a, ml, and mm parameters from eDOSMass.
  *    Typically, this leads to anisotropy.
  * formula<0 means no default model and no default parameters
  *   are available, so you have to provide values for
  *   'formula' and the respective parameters in order to use
  *   this parameter set.
	formula	= 0 ,	2	# [1]
  * Lifting of degeneracy of bulk valleys. The value for
  * electrons is added to the band edge for the subband
  * ladder of lower degeneracy if positive, and subtracted
  * from the band edge for the ladder of higher degeneracy
  * if negative. (that is, the value of the band edge is
  * always increased).  For holes, the value is subtracted from
  * the band edge for the heavy hole band is positive,
  * add added tp that of the light hole band if
  * negative.  The signs are such that the shift always
  * moves the band edges 'outward', away from midgap.  The
  * gap itself is defined as the separation of the
  * unshifted band edges and remains unaffected.
	offset	= 0.0000e+00 ,	0.0000e+00	# [eV]
  * Alternative to the specification of formula, offset,
  * and masses, you can make an arbitrary number of ladder
  * specification, 'eLadder(mz, mxy, deg, dE) and hLadder(...)
  * Here, mz is the quantization mass, mxy an in-plane DOS mass,
  * deg the ladder degeneracy, and dE an shift of the band edge
  * for the ladder (non-negative; the shift is always outward,
  * away from midgap).  When present, we solve the Schroedinger
  * equation separately for each ladder

  * Temperatures in rescaling of the mxy for eLadder and hLadder
	ShiftTemperature	= 1.0000e+10 ,	1.0000e+10	# [K]
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	A(0)	= 4.22	# [1]
	A(1)	= 4.22	# [1]
	B(0)	= 0.6084	# [1]
	B(1)	= 0.6084	# [1]
	C(0)	= 23.058	# [1]
	C(1)	= 23.058	# [1]
	ml(0)	= 0.024	# [1]
	ml(1)	= 0.074	# [1]
	mh(0)	= 0.41	# [1]
	mh(1)	= 0.62	# [1]
}

ConstantMobility:
{ * mu_const = mumax (T/T0)^(-Exponent)
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	Exponent(0)	= 1.5,	1.5	#[1]
	Exponent(1)	= 1,	2.1	#[1]
	mumax(0)	= 1.5000e+04,	2.5000e+02	#[cm^2/(Vs)]
	mumax(1)	= 6.0000e+03,	4.0000e+02	#[cm^2/(Vs)]
	mutunnel(0)	= 0.05,	0.05	#[cm^2/(Vs)]
	mutunnel(1)	= 0.05,	0.05	#[cm^2/(Vs)]
}

ConstantMobility_aniso:
{ * mu_const = mumax (T/T0)^(-Exponent)
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	Exponent(0)	= 1.5,	1.5	#[1]
	Exponent(1)	= 1,	2.1	#[1]
	mumax(0)	= 2.2600e+04,	2.5000e+02	#[cm^2/(Vs)]
	mumax(1)	= 8.5000e+03,	4.0000e+02	#[cm^2/(Vs)]
	mutunnel(0)	= 0.05,	0.05	#[cm^2/(Vs)]
	mutunnel(1)	= 0.05,	0.05	#[cm^2/(Vs)]
}


*  DopingDependence{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaAs) + (1-x) * P(InAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  DopingDependence_aniso{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaAs) + (1-x) * P(InAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  PhuMob{...} 
*  Philips Unified Mobility Model:
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaAs) + (1-x) * P(InAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  EnormalDependence{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaAs) + (1-x) * P(InAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  EnormalDependence_aniso{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaAs) + (1-x) * P(InAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

HighFieldDependence:
{ * Caughey-Thomas model:
  * mu_highfield = ( (alpha+1)*mu_lowfield ) / 
  *        ( alpha + ( 1 + ( (alpha+1)*mu_lowfield*E/vsat)^beta )^(1/beta) ) 
  * beta = beta0 (T/T0)^betaexp.
	alpha	= 0.0000e+00 ,	0.0000e+00	# [1]

  * Smoothing parameter for HydroHighField Caughey-Thomas model:
  * if Tl < Tc < (1+K_dT)*Tl, then smoothing between low field mobility
  * and HydroHighField mobility is used.
	K_dT	= 0.2 ,	0.2	# [1]
  * Transferred-Electron Effect:
  * mu_highfield = (mu_lowfield+(vsat/E)*(E/E0_TrEf)^4)/(1+(E/E0_TrEf)^4)
	E0_TrEf	= 4.0000e+03 ,	4.0000e+03	# [1]
	Ksmooth_TrEf	= 1 ,	1	# [1]

 * For vsat either Formula1 or Formula2 can be used.
	Vsat_Formula	= 2 ,	2	# [1]
 * Formula2 for saturation velocity:
 *            vsat = A_vsat - B_vsat*(T/T0)
 * (Parameter Vsat_Formula has to be equal to 2)
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	beta0(0)	= 5,	2	#[1]
	beta0(1)	= 5,	2	#[1]
	betaexp(0)	= 0.0000e+00,	0.0000e+00	#[1]
	betaexp(1)	= 0.0000e+00,	0.0000e+00	#[1]
	vsat0(0)	= 1.0000e+07,	1.0000e+07	#[cm/s]
	vsat0(1)	= 7.7000e+06,	7.7000e+06	#[cm/s]
	vsatexp(0)	= 0.0000e+00,	0.0000e+00	#[1]
	vsatexp(1)	= 0.0000e+00,	0.0000e+00	#[1]
	A_vsat(0)	= 1.0000e+07,	1.0000e+07	#[cm/s]
	A_vsat(1)	= 1.1300e+07,	1.1300e+07	#[cm/s]
	B_vsat(0)	= 0.0000e+00,	0.0000e+00	#[cm/s]
	B_vsat(1)	= 3.6000e+06,	3.6000e+06	#[cm/s]
	vsat_min(0)	= 5.0000e+05,	5.0000e+05	#[cm/s]
	vsat_min(1)	= 5.0000e+05,	5.0000e+05	#[cm/s]
}

HighFieldDependence_aniso:
{ * Caughey-Thomas model:
  * mu_highfield = ( (alpha+1)*mu_lowfield ) / 
  *        ( alpha + ( 1 + ( (alpha+1)*mu_lowfield*E/vsat)^beta )^(1/beta) ) 
  * beta = beta0 (T/T0)^betaexp.
	alpha	= 0.0000e+00 ,	0.0000e+00	# [1]

  * Smoothing parameter for HydroHighField Caughey-Thomas model:
  * if Tl < Tc < (1+K_dT)*Tl, then smoothing between low field mobility
  * and HydroHighField mobility is used.
	K_dT	= 0.2 ,	0.2	# [1]
  * Transferred-Electron Effect:
  * mu_highfield = (mu_lowfield+(vsat/E)*(E/E0_TrEf)^4)/(1+(E/E0_TrEf)^4)
	E0_TrEf	= 4.0000e+03 ,	4.0000e+03	# [1]
	Ksmooth_TrEf	= 1 ,	1	# [1]

 * For vsat either Formula1 or Formula2 can be used.
	Vsat_Formula	= 2 ,	2	# [1]
 * Formula2 for saturation velocity:
 *            vsat = A_vsat - B_vsat*(T/T0)
 * (Parameter Vsat_Formula has to be equal to 2)
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	beta0(0)	= 2,	2	#[1]
	beta0(1)	= 2,	2	#[1]
	betaexp(0)	= 0.0000e+00,	0.0000e+00	#[1]
	betaexp(1)	= 0.0000e+00,	0.0000e+00	#[1]
	vsat0(0)	= 1.0000e+07,	1.0000e+07	#[cm/s]
	vsat0(1)	= 7.7000e+06,	7.7000e+06	#[cm/s]
	vsatexp(0)	= 0.0000e+00,	0.0000e+00	#[1]
	vsatexp(1)	= 0.0000e+00,	0.0000e+00	#[1]
	A_vsat(0)	= 1.0000e+07,	1.0000e+07	#[cm/s]
	A_vsat(1)	= 1.1300e+07,	1.1300e+07	#[cm/s]
	B_vsat(0)	= 0.0000e+00,	0.0000e+00	#[cm/s]
	B_vsat(1)	= 3.6000e+06,	3.6000e+06	#[cm/s]
	vsat_min(0)	= 5.0000e+05,	5.0000e+05	#[cm/s]
	vsat_min(1)	= 5.0000e+05,	5.0000e+05	#[cm/s]
}

Scharfetter * relation and trap level for SRH recombination:
{ * tau = taumin + ( taumax - taumin ) / ( 1 + ( N/Nref )^gamma)
  * tau(T) = tau * ( (T/300)^Talpha )          (TempDep)
  * tau(T) = tau * exp( Tcoeff * ((T/300)-1) ) (ExpTempDep)
	taumin	= 0.0000e+00 ,	0.0000e+00	# [s]
	taumax	= 1.0000e-09 ,	1.0000e-09	# [s]
	Nref	= 1.0000e+16 ,	1.0000e+16	# [cm^(-3)]
	gamma	= 1 ,	1	# [1]
	Talpha	= -1.5000e+00 ,	-1.5000e+00	# [1]
	Tcoeff	= 2.55 ,	2.55	# [1]
	Etrap	= 0.0000e+00	# [eV]
}

Auger * coefficients:
{ * R_Auger = ( C_n n + C_p p ) ( n p - ni_eff^2)
  * with C_n,p = (A + B (T/T0) + C (T/T0)^2) (1 + H exp(-{n,p}/N0))
	A	= 1.0000e-30 ,	1.0000e-30	# [cm^6/s]
	B	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	C	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	H	= 0.0000e+00 ,	0.0000e+00	# [1]
	N0	= 1.0000e+18 ,	1.0000e+18	# [cm^(-3)]
}


*  Radiative Recombination Model{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaAs) + (1-x) * P(InAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

RadiativeRecombination * coefficients:
{ * R_Radiative = C * (T/Tpar)^alpha * (n p - ni_eff^2)
  * C    
  * alpha 
	C	= 2.0000e-10	# [cm^3/s]
	alpha	= 0.0000e+00	# []
}



*  Piezoelectric_Polarization{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaAs) + (1-x) * P(InAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

